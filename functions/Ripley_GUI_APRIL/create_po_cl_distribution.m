function out = create_po_cl_distribution(lambda, S_lambda, E_distance, x_side, y_side, z_side)
% create_po_cl_distribution(lambda, S_lambda, E_distance, x_side, y_side, z_side)
% Create a clustered distribution
% Input:
% S_lambda   - nr of offspring per parent event. Should be an integer
% bigger than 0.
% E_distance - mean distance from offspring to parent
% x_side, y_side, z_side  - side of cubic distribution volume
% Output
% [X Y Z]
%
% License: RipleyGUI is distributed free under the conditions that
% (1) it shall not be incorporated in software that is subsequently sold; 
% (2) the authorship of the software shall be acknowledged in any publication that uses results generated by the software; 
% (3) this notice shall remain in place in each source file. 

parent_intensity = lambda/S_lambda;

parent_events = floor(parent_intensity * x_side*y_side*z_side);
if(parent_events == 0)
    errordlg('Intensity settings results in 0 events. Try higher intensity or smaller groups.','Input error');
    out = [];
    return;
end
parent_pos = rand(parent_events,3);
xx = parent_pos(:,1) * x_side;
yy = parent_pos(:,2) * y_side;
zz = parent_pos(:,3) * z_side;

offspring_pos = [];

for i = 1:parent_events
    offspring = round(S_lambda);
    if offspring > 0
        for j = 1:offspring
            R = exprnd(E_distance); %exponential function
            z = rand(1)*2*R - R;
            theta = rand(1)*2*pi;
            phi = asin(z/R);
            [dx dy dz] = sph2cart(theta, phi, R); % random point on sphere of R distance
            offspring_pos = [offspring_pos;xx(i)+dx yy(i)+dy zz(i)+dz];
        end
    end
end
% wrapping edges
offspring_pos(:,1) = mod(offspring_pos(:,1), x_side); 
offspring_pos(:,2) = mod(offspring_pos(:,2), y_side);
offspring_pos(:,3) = mod(offspring_pos(:,3), z_side);

out = offspring_pos;