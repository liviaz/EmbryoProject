function out = create_distribution()

% HARDCODED T
t = 1:40
S_sigma = 0;      % offspring nr standard deviation  
delta = 9;         % minimum distance between events
S_lambda = 1:10;   % mean nr of offspring
S_min=1; S_max=10;
E_distance = 10:35; % mean distance from parent to offspring
E_min = 10; E_max = 35;
nbr_of_sim = 10;
side =100;

%allow the user to specify where to load the settings file
dirname = uigetdir('', 'Pick a folder containing ascii file distributions');
    if isequal(dirname,0)
       return
    end
       
%construct the path name
loadDataName = fullfile(dirname,'*.ascii');

%list all data files in the folder
filelist = dir(loadDataName);

% Load all distributions to dist_array
dist_array = [];
for i = 1:length(filelist)
    if (~filelist(i).isdir)
        filename = filelist(i).name;
        % Check the file is valid
        try
            data = dlmread(fullfile(dirname, filename));
        catch
            error_msg{1} = filename;
            error_msg{2} = 'Cant read file. Please check the format';
            error_msg{3} = lasterr;
            errordlg(error_msg,'File error');
            continue;
        end
        if size(data,2) < 3
            error_msg{1} = filename;
            error_msg{2} =  'The input doesnt have the expected format.';
            error_msg{3} = 'Expected three columns delimited with comma, space or tab';
            errordlg(error_msg ,'File error');
            continue;
        end
        if any(any(isnan(data))) || any(any(isinf(data)))
            error_msg{1} = filename;
            error_msg{2} = 'Input file contains non-finite numbers';
            errordlg(error_msg,'File error');
            continue;
        end
        % Get data from the file
        dist_array{i} = data
    end
end

% Use Divide and Station on all distributions
pos = 1;
divided_array = [];
for i = 1:length(dist_array) 
    parts = divide(dist_array{i});
    for j = 1:length(parts)
        adjusted = station(parts{1,j});
        divided_array{pos} = adjusted;
        pos = pos+1;
    end
end    
    
    
% Collect properties
lambdas = [];
Ks = [];

for i = 1:length(divided_array)
    X = divided_array{i}(:,1);
    Y = divided_array{i}(:,2);
    Z = divided_array{i}(:,3);
    V = abs(max(X)-min(X))*abs(max(Y)-min(Y))*abs(max(Z)-min(Z));
    lambda_data = length(X)/V;
    lambdas = [lambdas lambda_data];
    rip_data = RipleyK_comuse(divided_array{i}(:,1:3), t,0,0);
    EK = rip_data.EK;
    Ks = [Ks; rip_data.K];
end
lambda_hat = mean(lambdas);
K_hat = mean(Ks);

%plot the estimated K
figure, hold on
for i=1:size(Ks,1)
    plot(t, Ks(i,:),'-r')
end
plot(t, K_hat,'-sr','LineWidth',2,'MarkerEdgeColor','k','MarkerFaceColor',red,'MarkerSize',2)
title('Estimated K'), xlabel('t'), ylabel('K(t)')

% Inhibited Poisson Cluster Process
D_values_array = [];
K_values_array = [];
param_array = [];
w = waitbar(0,'Creating Idists');
for delta = delta % minimum distance between events
    for S_lambda = S_lambda % mean nr of offspring
        for E_distance = E_distance % mean distance from parent to offspring
            tot_steps = (delta_max-delta_min+1)*(S_max - S_min+1)*(E_max-E_min+1);
            current_steps = (delta-delta_min)*(S_max - S_min+1)*(E_max-E_min+1) + (S_lambda - S_min)*(E_max-E_min+1) + (E_distance-E_min);
            helpstr = ['delta = ' num2str(delta) '. S = ' num2str(S_lambda) '. E = ' num2str(E_distance)];
            waitbar(current_steps/tot_steps,w,helpstr);
            D_values = [];
            K_values = [];
            for i=1:nbr_of_sim
                ICdist = create_inhib_po_cl_distribution(lambda_hat, S_lambda, S_sigma, E_distance, delta, side);
                ICdist_kdata = ripleyK(ICdist, t);
                D_values = [D_values; ICdist_kdata.ripK - ICdist_kdata.EK];
                K_values = [K_values; ICdist_kdata.ripK];
            end
            D_values_array = [D_values_array; sum(D_values)/nbr_of_sim];
            K_values_array = [K_values_array; sum(K_values)/nbr_of_sim];
            param_array = [param_array; delta S_lambda E_distance];
        end
    end
end
close(w);

% save to output
out.D = D_values_array;
out.K = K_values_array;
out.param = param_array;

% Plot K array
figure, hold on
for i=1:size(K_values_array,1)
    plot(t, K_values_array(i,:),'-b')
end
title('K values for different params. Best in thick')
xlabel('t'), ylabel('K(t)')
    
% Compare Inhibited Cluster with K hat
c = 0.5;
K_c = K_hat.^c;
K_values_diff = [];
for i = 1:length(param_array)
    K_values_diff = [K_values_diff; (K_values_array(i,:).^c - K_c).^2];
end

diff_tot = sum(K_values_diff,2);
[min_diff, pos] = min(diff_tot);

best_delta = param_array(pos,1);
best_lambda = param_array(pos,2);
best_E = param_array(pos,3);

% Plot best K array thick
plot(t, K_values_array(pos,:)

%save to output
out.delta = best_delta;
out.lambda = best_lambda;
out.E = best_E;

%
    

    
    
    
    
    
    
    